{"version":3,"file":"ce924c759089726ed4e0ad586ff2624237f6c872-b7b79069ad6ea480c6bf.js","mappings":"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","sources":["webpack://kodooui/./src/components/Common/Content.tsx","webpack://kodooui/./src/components/Main/CategoryList.tsx","webpack://kodooui/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack://kodooui/./src/components/Main/Container.tsx","webpack://kodooui/./src/components/Main/PostItem.tsx","webpack://kodooui/./src/hooks/useInfiniteScroll.tsx","webpack://kodooui/./src/components/Main/PostList.tsx"],"sourcesContent":["import React, { FunctionComponent, ReactNode } from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst ContentWrapper = styled.section`\n  position: relative;\n`\n\nconst Content: FunctionComponent<{ children: ReactNode }> = ({ children }) => {\n  return (\n    <ContentWrapper>\n      <h2 className=\"blind\">블로그 콘텐츠</h2>\n      { children }\n    </ContentWrapper>\n  )\n}\n\nexport default Content","import React, { ButtonHTMLAttributes, FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport type CategoryListProps = {\n  selectedCategory: string;\n  categoryEntities: {\n    [key: string]: number;\n  };\n  changeCategory: (category: string) => void\n}\n\nconst CategoryListWrapper = styled.div`\n  padding: 68px 40px;\n\n  @media (max-width: 767px) {\n    padding: 60px 30px;\n  }\n`\n\nconst CategoryListGroup = styled.div`\n  position: relative;\n`\n\nconst CategoryItem = styled(({ ...props }: ButtonHTMLAttributes<HTMLButtonElement>) => (\n  <button type=\"button\" {...props} />\n))`\n  display: block;\n  position: relative;\n  padding: 0 20px;\n  min-width: 178px;\n  height: 48px;\n  border-radius: 5px;\n  color: #000;\n  font-size: 17px;\n  line-height: 48px;\n  text-align: left;\n  transition: font-size 0.3s ease-out;\n  \n  &.is-active {\n    font-size: 18px;\n    font-weight: 500;\n  }\n\n  @supports not (mix-blend-mode: difference) {\n    &.is-active {\n      color: #fff;\n      background-color: #5d89ff;\n    }\n  }\n  \n  &:not(.is-active):hover {\n    color: #5d89ff;\n    font-weight: 500;\n  }\n  \n  & + button {\n    margin-top: 8px;\n  }\n`;\n\nconst ShadowBox = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 178px;\n  height: 48px;\n  border-radius: 5px;\n  transition: transform 0.3s ease-out;\n  \n  &:first-of-type{\n    z-index: 1;\n\n    @supports (mix-blend-mode: difference) {\n      background-color: white;\n      mix-blend-mode: difference;\n    }\n  }\n  \n  &:last-of-type {\n    z-index: -1;\n\n    @supports (mix-blend-mode: difference) {\n      background-color: #5d89ff;\n      filter: hue-rotate(180deg);\n    }\n  }\n`\n\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\n  selectedCategory,\n  categoryEntities,\n  changeCategory,\n}) {\n  const categoryGroupRef = useRef<HTMLDivElement>(null);\n  const [offsetTop, setOffsetTop] = useState(0);\n\n  const onClickHandler = (el: HTMLButtonElement, name: string, index: number) => {\n    const { height } = el.getBoundingClientRect();\n    const top = (height * index) + (8 * index);\n    setOffsetTop(top);\n    changeCategory(name);\n  }\n\n  const categoryList = Object.entries(categoryEntities);\n  const categoryAllIndex = categoryList.findIndex(category => category[0] === 'All');\n  const categoryAll = categoryList.splice(categoryAllIndex, 1)[0];\n  categoryList.unshift(categoryAll);\n\n  return (\n    <CategoryListWrapper>\n      <CategoryListGroup ref={categoryGroupRef}>\n        <ShadowBox style={{ transform: `translateY(${offsetTop}px)` }} />\n        {categoryList.map(([name], index) => (\n          <CategoryItem\n            className={selectedCategory === name ? 'is-active' : ''}\n            onClick={e => onClickHandler(e.target as HTMLButtonElement, name, index)}\n            key={name}\n          >\n            {name}\n          </CategoryItem>\n        ))}\n        <ShadowBox style={{ transform: `translateY(${offsetTop}px)` }} />\n      </CategoryListGroup>\n    </CategoryListWrapper>\n  )\n}\n\nexport default CategoryList","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","import React, { FunctionComponent, ReactNode } from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst ContainerWrapper = styled.div`\n  display: grid;\n  margin: 0 auto;\n  max-width: 1440px;\n  box-sizing: border-box;\n  grid-template-columns: 22fr 65fr 13fr;\n\n  @media (max-width: 767px) {\n    grid-template-columns: 1fr;\n  }\n  @media (min-width: 768px) and (max-width: 1023px) {\n    grid-template-columns: 3fr 7fr;\n  }\n  @media (min-width: 1024px) and (max-width: 1359px) {\n    grid-template-columns: 22fr 78fr;\n  }\n`\n\nconst Container: FunctionComponent<{ children: ReactNode }> = ({ children }) => {\n  return (\n    <ContainerWrapper>\n      { children }\n    </ContainerWrapper>\n  )\n}\n\nexport default Container","import React, { FunctionComponent } from 'react';\nimport styled from \"@emotion/styled\";\nimport {Link} from \"gatsby\";\nimport {PostFrontmatterType} from \"../../types/PostItem.types\";\nimport {GatsbyImage} from \"gatsby-plugin-image\";\n\ntype PostItemProps = PostFrontmatterType & { link: string }\n\nconst PostItemWrapper = styled.article`\n  position: relative;\n\n  @media (max-width: 767px) {\n    & + article {\n      margin-top: 40px;\n    }\n  }\n`;\n\nconst ThumbnailWrapper = styled.div`\n  overflow: hidden;\n  position: relative;\n  padding-top: 67.5%;\n  border-radius: 16px;\n  box-shadow: rgb(0 0 0 / 12%) 0 0 4px;\n  transition-property: transform, box-shadow;\n  transition-duration: 0.2s;\n  transition-timing-function: ease;\n\n  @media (max-width: 767px) {\n    box-shadow: rgb(0 0 0 / 24%) 0 0 1px;\n  }\n`\n\nconst ThumbnailImage = styled(GatsbyImage)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n\n  img {\n    border-radius: 16px;\n  }\n`;\n\nconst PostItemContent = styled.div`\n  padding: 25px 2px;\n  letter-spacing: -0.5px;\n\n  @media (max-width: 767px) {\n    padding: 12px 2px;\n  }\n`;\n\nconst Title = styled.h3`\n  display: -webkit-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 28px;\n  font-weight: 500;\n\n  @media (max-width: 767px) {\n    font-size: 24px;\n  }\n`;\n\nconst Category = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 5px -5px 10px;\n\n  @media (max-width: 767px) {\n    margin: 4px -5px 6px;\n  }\n`;\n\nconst CategoryItem = styled.div`\n  margin: 2.5px 5px;\n  padding: 3px 2px;\n  color: #5d89ff;\n  font-size: 18px;\n\n  @media (max-width: 767px) {\n    margin: 2.5px 4px;\n    font-size: 16px;\n  }\n`;\n\nconst Summary = styled.p`\n  display: -webkit-box;\n  overflow: hidden;\n  margin: 13px 0;\n  padding: 0 2px;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 16px;\n  line-height: 22px;\n  opacity: 0.8;\n\n  @media (max-width: 767px) {\n    margin: 8px 0;\n    font-size: 14px;\n    line-height: 19px;\n  }\n`;\n\nconst Date = styled.time`\n  display: block;\n  font-size: 15px;\n  font-weight: 400;\n  opacity: 0.7;\n\n  @media (max-width: 767px) {\n    padding: 0 2px;\n    font-size: 14px;\n  }\n`;\n\n\nconst PostItemLink = styled(Link)`\n  cursor: pointer;\n  display: block;\n\n  &:hover ${ThumbnailWrapper} {\n    transform: translateY(-8px);\n    box-shadow: #eee 0 4px 12px;\n  }\n  &:hover ${PostItemContent} {\n    filter: contrast(200%);\n  }\n`;\n\nconst PostItem: FunctionComponent<PostItemProps> = function ({\n  title,\n  date,\n  categories,\n  summary,\n  thumbnail: {\n    childImageSharp: {\n      gatsbyImageData\n    }\n  },\n  link,\n}) {\n  return (\n    <PostItemWrapper>\n      <PostItemLink to={link}>\n        <ThumbnailWrapper>\n          <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\n        </ThumbnailWrapper>\n\n        <PostItemContent>\n          <Category>\n            {categories.map(category => (\n              <CategoryItem key={category}>{category}</CategoryItem>\n            ))}\n          </Category>\n          <Title>{title}</Title>\n          <Summary>{summary}</Summary>\n          <Date dateTime={date.replace(/\\./g, '-')}>{date}</Date>\n        </PostItemContent>\n      </PostItemLink>\n    </PostItemWrapper>\n  )\n}\n\nexport default PostItem;","import {MutableRefObject, useRef, useMemo, useState, useEffect} from 'react';\nimport { PostListItemType } from \"../types/PostItem.types\";\n\nexport type useInfiniteScrollType = {\n  containerRef: MutableRefObject<HTMLDivElement | null>\n  postList: PostListItemType[]\n}\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\n\nconst useInfiniteScroll = function (\n selectedCategory: string,\n posts: PostListItemType[]\n): useInfiniteScrollType {\n  const containerRef: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(\n    null,\n  );\n  const observer: MutableRefObject<IntersectionObserver | null> = useRef<IntersectionObserver>(\n    null,\n  )\n  const [count, setCount] = useState<number>(1);\n\n  const postListByCategory = useMemo<PostListItemType[]>(\n    () =>\n      posts.filter(({ node: { frontmatter: { categories } } } : PostListItemType) =>\n        selectedCategory !== 'All' ?\n          categories.includes(selectedCategory)\n          : true,\n      ),\n    [selectedCategory]\n  );\n\n  useEffect(() => {\n   observer.current = new IntersectionObserver(\n      (entries, observer) => {\n        if (!entries[0].isIntersecting) return;\n\n        setCount(value => value + 1);\n        observer.unobserve(entries[0].target);\n      },\n    )\n  }, [])\n\n  useEffect(() => setCount(1), [selectedCategory])\n\n  useEffect(() => {\n    if (\n      NUMBER_OF_ITEMS_PER_PAGE * count > postListByCategory.length ||\n      containerRef.current === null ||\n      containerRef.current.children.length === 0 ||\n      observer.current === null\n    ) {\n      return;\n    }\n\n    observer.current.observe(\n      containerRef.current.children[containerRef.current.children.length - 1],\n    )\n  }, [count, selectedCategory])\n\n  return {\n    containerRef,\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE)\n  };\n}\n\nexport default useInfiniteScroll;","import React, {FunctionComponent} from 'react';\nimport styled from \"@emotion/styled\";\nimport PostItem from \"components/Main/PostItem\";\nimport {PostListItemType} from \"../../types/PostItem.types\";\nimport useInfiniteScroll, {useInfiniteScrollType} from \"hooks/useInfiniteScroll\";\n\ntype PostListProps = {\n  selectedCategory: string;\n  posts: PostListItemType[]\n}\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 42px;\n  padding: 60px 40px;\n  box-sizing: border-box;\n  \n  @media (max-width: 767px) {\n    grid-template-columns: 1fr;\n    gap: 0;\n    padding: 20px 30px;\n  }\n  @media (min-width: 768px) and (max-width: 1023px) {\n    grid-template-columns: 1fr;\n    gap: 30px;\n    padding-left: 0;\n  }\n  @media (min-width: 1024px) and (max-width: 1359px) {\n    grid-template-columns: 1fr 1fr;\n    gap: 30px;\n    padding-left: 0;\n  }\n`;\n\nconst PostList: FunctionComponent<PostListProps> = function ({\n  selectedCategory,\n  posts,\n}) {\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\n    selectedCategory,\n    posts\n  );\n\n  return (\n    <PostListWrapper ref={containerRef}>\n      {postList.map(\n        ({\n           node: { id, fields: { slug }, frontmatter },\n         }: PostListItemType) => (\n          <PostItem\n            {...frontmatter}\n            link={slug}\n            key={id}\n          />\n        ),\n      )}\n    </PostListWrapper>\n  )\n}\n\nexport default PostList;"],"names":["ContentWrapper","children","___EmotionJSX","className","CategoryListWrapper","CategoryListGroup","CategoryItem","_styled","props","obj","TypeError","type","ShadowBox","selectedCategory","categoryEntities","changeCategory","categoryGroupRef","useRef","useState","offsetTop","setOffsetTop","categoryList","Object","entries","categoryAllIndex","findIndex","category","categoryAll","splice","unshift","ref","style","transform","map","index","name","onClick","e","el","height","getBoundingClientRect","onClickHandler","target","key","ContainerWrapper","PostItemWrapper","ThumbnailWrapper","ThumbnailImage","GatsbyImage","PostItemContent","Title","Category","Summary","Date","PostItemLink","Link","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","to","image","alt","dateTime","replace","posts","containerRef","observer","count","setCount","postListByCategory","useMemo","filter","node","frontmatter","includes","useEffect","current","IntersectionObserver","isIntersecting","value","unobserve","length","observe","postList","slice","PostListWrapper","useInfiniteScroll","id","slug","fields","PostItem"],"sourceRoot":""}